---
# Debug tasks for troubleshooting template issues.
# These are skipped by default. To run them: ansible-playbook ... --tags debug
# To skip debug tasks (default): ansible-playbook ... --skip-tags debug
# Universal debug: Set DEBUG=true environment variable to enable debug tasks across all roles

- name: Debug dashboard template raw output
  ansible.builtin.debug:
    msg: "{{ lookup('template', 'grafana_dashboard.json.j2') }}"
  tags: ['debug']
  when: ansible_env.DEBUG | default('false') == 'true'

- name: Debug dashboard template type
  ansible.builtin.debug:
    msg: "Type: {{ lookup('template', 'grafana_dashboard.json.j2') | type_debug }}"
  tags: ['debug']
  when: ansible_env.DEBUG | default('false') == 'true'

- name: Validate required passwords are set
  ansible.builtin.fail:
    msg: |
      Password validation failed:
      - grafana_admin_password is not defined or empty
      
      This password MUST be overridden in group_vars, host_vars, or vault files.
  when: 
    - grafana_admin_password == "" or grafana_admin_password is not defined
  tags: [grafana, validation, always]

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install required packages
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - software-properties-common
      - wget
    state: present

- name: Add Grafana GPG key
  ansible.builtin.apt_key:
    url: https://packages.grafana.com/gpg.key
    state: present

- name: Add Grafana repository
  ansible.builtin.apt_repository:
    repo: "deb https://packages.grafana.com/oss/deb stable main"
    state: present
    filename: grafana

- name: Install Grafana
  ansible.builtin.apt:
    name: grafana
    state: present
    update_cache: yes

- name: Start and enable Grafana
  ansible.builtin.systemd:
    name: "{{ grafana_service_name }}"
    state: started
    enabled: yes

- name: Wait for Grafana to be ready
  ansible.builtin.wait_for:
    host: "{{ grafana_bind_address }}"
    port: "{{ grafana_port }}"
    delay: 10
    timeout: 60

- name: Set Grafana admin password using Grafana CLI
  ansible.builtin.shell: |
    grafana-cli admin reset-admin-password {{ grafana_admin_password }}
  register: password_set_result
  failed_when: false
  no_log: true

- name: Restart Grafana after password change
  ansible.builtin.systemd:
    name: "{{ grafana_service_name }}"
    state: restarted

- name: Wait for Grafana to be ready after restart
  ansible.builtin.wait_for:
    host: "{{ grafana_bind_address }}"
    port: "{{ grafana_port }}"
    delay: 10
    timeout: 60

- name: Configure Grafana data source (Prometheus) using uri with force_basic_auth
  ansible.builtin.uri:
    url: "http://{{ grafana_bind_address }}:{{ grafana_port }}/api/datasources"
    method: POST
    headers:
      Content-Type: "application/json"
    body_format: json
    body:
      name: "Prometheus"
      type: "prometheus"
      url: "http://{{ ansible_default_ipv4.address }}:{{ prometheus_port }}"
      access: "proxy"
      isDefault: true
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    force_basic_auth: true
    status_code: [200, 409]
  register: grafana_datasource
  retries: 3
  delay: 10
  until: grafana_datasource.status == 200 or grafana_datasource.status == 409

- name: Copy dashboard template to remote
  ansible.builtin.template:
    src: grafana_dashboard.json.j2
    dest: /tmp/grafana_dashboard.json
    mode: '0644'

- name: Import default dashboard using uri (dict)
  ansible.builtin.uri:
    url: "http://{{ grafana_bind_address }}:{{ grafana_port }}/api/dashboards/db"
    method: POST
    headers:
      Content-Type: "application/json"
    body_format: json
    body: "{{ lookup('template', 'grafana_dashboard.json.j2') }}"
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    force_basic_auth: true
    status_code: [200, 409]
  register: grafana_dashboard
  retries: 3
  delay: 10
  until: grafana_dashboard.status == 200 or grafana_dashboard.status == 409
